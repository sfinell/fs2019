{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","Filter","props","react_default","a","createElement","value","onChange","PersonForm","onSubmit","name","onNameChange","number","onNumberChange","type","Person","onClick","onDelete","Persons","persons","map","person","App_Person","key","Notification","_ref","errorMsg","infoMsg","errorStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","notificationStyle","Object","objectSpread","style","App","_useState","useState","_useState2","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","filter","setFilter","_useState9","_useState10","infoMessage","setInfoMessage","_useState11","_useState12","errorMessage","setErrorMessage","useEffect","console","log","personService","allPersons","length","displayError","msg","setTimeout","displayInfo","re","RegExp","App_Notification","App_Filter","event","target","App_PersonForm","preventDefault","old","find","e","window","confirm","changedPerson","updatedPerson","p","catch","error","updateName","newPerson","App_Persons","test","removedPerson","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.535e1ef8.chunk.js","sourcesContent":["import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/persons'\r\n//const baseUrl = 'https://arcane-basin-46776.herokuapp.com/persons'\r\n//const baseUrl = '/persons'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n//    return axios.get(baseUrl).then(response => response.data)\r\n  }\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update, remove}\r\n","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <div>filter shown with <input\r\n      value={props.value}\r\n      onChange={props.onChange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n    <div>\r\n      name: <input\r\n        value={props.name}\r\n        onChange={props.onNameChange}/>\r\n    </div>\r\n    <div>\r\n      number: <input\r\n        value={props.number}\r\n        onChange={props.onNumberChange}/>\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Person = (props) => {\r\n  return (\r\n    <div>{props.name} {props.number} <button type=\"button\" id={props.id} name={props.name} onClick={props.onDelete}>delete</button></div>\r\n  )\r\n}\r\n\r\nconst Persons = (props) => {\r\n  return (\r\n    <div>\r\n      {props.persons.map(person =>\r\n        <Person key={person.name} id={person.id} name={person.name} number={person.number} onDelete={props.onDelete}/>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Notification = ({errorMsg, infoMsg}) => {\r\n  const errorStyle = {\r\n    color: 'red',\r\n    background: 'lightgrey',\r\n    fontSize: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  }\r\n  const notificationStyle = {\r\n    ...errorStyle,\r\n    color : 'green'\r\n  }\r\n  if (errorMsg !== null) {\r\n    return (\r\n      <div style={errorStyle}>\r\n        {errorMsg}\r\n      </div>\r\n    )\r\n  }\r\n  if (infoMsg !== null) {\r\n    return (\r\n      <div style={notificationStyle}>\r\n        {infoMsg}\r\n      </div>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setFilter ] = useState('')\r\n  const [ infoMessage, setInfoMessage ] = useState(null)\r\n  const [ errorMessage, setErrorMessage ] = useState(null)\r\n\r\n  useEffect(() =>\r\n  {\r\n    console.log('effect')\r\n    personService\r\n      .getAll()\r\n      .then(allPersons =>\r\n        {\r\n          console.log('allPersons:', allPersons)\r\n          setPersons(allPersons)\r\n        })\r\n  }, [])\r\n  console.log('render', persons.length, 'persons')\r\n\r\n  const displayError = (msg) => {\r\n    setErrorMessage(msg)\r\n    setTimeout(() => { setErrorMessage(null) }, 3000)\r\n  }\r\n\r\n  const displayInfo = (msg) => {\r\n    setInfoMessage(msg)\r\n    setTimeout(() => { setInfoMessage(null) }, 2000)\r\n  }\r\n\r\n  const updateName = (old) => {\r\n    console.log('updateName, id:', old.id)\r\n    if (!window.confirm(`${newName} is already added to phonebook, replace?`)) return\r\n    const changedPerson = { ...old, number: newNumber }\r\n    personService.update(old.id, changedPerson)\r\n    .then(updatedPerson => {\r\n      setPersons(persons.map(p => p.id !== old.id ? p : updatedPerson))\r\n      setNewName(\"\")\r\n      setNewNumber(\"\")\r\n      displayInfo(`Updated ${updatedPerson.name}`)\r\n    })\r\n    .catch(error => {\r\n      console.log('error:', error)\r\n      setPersons(persons.filter(p => p.id !== old.id))\r\n      setNewName(\"\")\r\n      setNewNumber(\"\")\r\n      displayError(`Person '${old.name}' was already removed from server`)\r\n    })\r\n}\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    console.log('button clicked', event.target)\r\n    const old = persons.find(e => e.name === newName)\r\n    if (old) {\r\n      updateName(old)\r\n      return\r\n    }\r\n    const nameObject = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n    personService.create(nameObject)\r\n    .then(newPerson => {\r\n      setPersons(persons.concat(newPerson))\r\n      setNewName(\"\")\r\n      setNewNumber(\"\")\r\n      displayInfo(`Added ${newPerson.name}`)\r\n    })\r\n    .catch(error => {\r\n      displayError(error.response.data.error)\r\n    })\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value)\r\n  }\r\n\r\n  const deleteName = (event) => {\r\n    event.preventDefault()\r\n    const id = event.target.id\r\n    const name = event.target.name\r\n    console.log('delete id, name:', id, name)\r\n    const remove = window.confirm(`Delete ${name} ?`)\r\n    if (remove) {\r\n      personService.remove(id)\r\n      .then(removedPerson => {\r\n        setPersons(persons.filter(p => p.id !== id))\r\n        displayInfo(`Deleted ${name}`)\r\n      })\r\n      .catch(error => {\r\n        console.log('error:', error)\r\n        setPersons(persons.filter(p => p.id !== id))\r\n        setNewName(\"\")\r\n        setNewNumber(\"\")\r\n        displayError(`Person '${name}' was already removed from server`)\r\n      })\r\n      }\r\n  }\r\n\r\n  const re = new RegExp(filter, \"i\");\r\n  const filteredPersons = () => persons.filter(e => re.test(e.name))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification errorMsg={errorMessage} infoMsg={infoMessage} />\r\n      <Filter value={filter} onChange={handleFilterChange} />\r\n      <h3>Add a new</h3>\r\n      <PersonForm\r\n        onSubmit={addName}\r\n        name={newName}\r\n        onNameChange={handleNameChange}\r\n        number={newNumber}\r\n        onNumberChange={handleNumberChange}\r\n      />\r\n      <h3>Numbers</h3>\r\n      <Persons persons={filteredPersons()} onDelete={deleteName}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}